{"entries":[{"timestamp":1739032676555,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"20\" y=\"124\"><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow></value></block></statement></block><block type=\"pxt-on-start\" x=\"448\" y=\"146\"><statement name=\"HANDLER\"><block type=\"device_show_leds\"><field name=\"LEDS\">`\n        # . . . # \n        . # . # . \n        . . # . . \n        . # . # . \n        # . . . #\n        `</field></block></statement"],[1,"www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\""],[0,"></b"]],"start1":12,"start2":12,"length1":540,"length2":103},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"basic.showLeds(`\n    # . . . #\n    . # . # .\n    . . # . .\n    . # . # .\n    # . . . #\n    `)\nbasic.forever(function () {\n    if (true) {\n    \t\n    }\n})"],[0,"\n"]],"start1":0,"start2":0,"length1":153,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"   \""],[-1,"preferredEditor\": \"blocksprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":239,"start2":239,"length1":36,"length2":31}]}]},{"timestamp":1739033191769,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"bles><block "],[1,"type=\"device_forever\" x=\"20\" y=\"124\"><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow></value></block></statement></block><block "],[0,"type=\"pxt-on"]],"start1":73,"start2":73,"length1":24,"length2":243}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"\n    `)\n"],[1,"basic.forever(function () {\n    if (true) {\n    \t\n    }\n})\n"]],"start1":86,"start2":86,"length1":8,"length2":67}]}]},{"timestamp":1739033290059,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0," x=\""],[-1,"0"],[1,"448"],[0,"\" y=\""],[-1,"0"],[1,"146"],[0,"\"><s"]],"start1":104,"start2":104,"length1":15,"length2":19}]}]},{"timestamp":1739625223948,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0," x=\""],[-1,"147"],[1,"0"],[0,"\" y=\""],[-1,"28"],[1,"0"],[0,"\"><s"]],"start1":104,"start2":104,"length1":18,"length2":15}]}]},{"timestamp":1739625234027,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"iables><"],[1,"block type=\"pxt-on-start\" x=\"147\" y=\"28\"><statement name=\"HANDLER\"><block type=\"device_show_leds\"><field name=\"LEDS\">`\n        # . . . # \n        . # . # . \n        . . # . . \n        . # . # . \n        # . . . #\n        `</field></block></statement></block><"],[0,"/xml>"]],"start1":71,"start2":71,"length1":13,"length2":272}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[1,"basic.showLeds(`\n    # . . . #\n    . # . # .\n    . . # . .\n    . # . # .\n    # . . . #\n    `)"],[0,"\n"]],"start1":0,"start2":0,"length1":1,"length2":94}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," \"*\""],[-1,",\n        \"maqueen\": \"github:dfrobot/pxt-maqueen#v1.7.15\""],[0,"\n   "]],"start1":142,"start2":142,"length1":65,"length2":8},{"diffs":[[0,".md\""],[-1,",\n        \"main.py\""],[0,"\n   "]],"start1":226,"start2":226,"length1":27,"length2":8},{"diffs":[[0,"\": \""],[-1,"py"],[1,"blocks"],[0,"prj\""]],"start1":258,"start2":258,"length1":10,"length2":14}]},{"type":"added","filename":"main.py","value":"from microbit import *\nimport maqueen\n\n# Initialize motor driver\nmaqueen.motor_init()\n\n# Line Following\ndef line_follow():\n    left_sensor = maqueen.read_line_sensor(0)  # Assuming sensor 0 is left\n    right_sensor = maqueen.read_line_sensor(1) # Assuming sensor 1 is right\n\n    if left_sensor == 0 and right_sensor == 0:  # Both on white, go forward\n        maqueen.motor_move(maqueen.MOTOR_ALL, maqueen.MOTOR_FORWARD, 50, 0) # 0 duration means continuously\n    elif left_sensor == 1 and right_sensor == 0: # Left on black, turn left\n        maqueen.motor_move(maqueen.MOTOR_LEFT, maqueen.MOTOR_FORWARD, 30, 0)\n        maqueen.motor_move(maqueen.MOTOR_RIGHT, maqueen.MOTOR_FORWARD, 70, 0)\n    elif left_sensor == 0 and right_sensor == 1: # Right on black, turn right\n        maqueen.motor_move(maqueen.MOTOR_LEFT, maqueen.MOTOR_FORWARD, 70, 0)\n        maqueen.motor_move(maqueen.MOTOR_RIGHT, maqueen.MOTOR_FORWARD, 30, 0)\n    elif left_sensor == 1 and right_sensor == 1: # Both on black, stop or other action\n        maqueen.motor_stop_all()  # Stop\n        # Or: maqueen.motor_move(maqueen.MOTOR_ALL, maqueen.MOTOR_BACKWARD, 50, 500)  # Reverse for 500ms\n\n# Obstacle Avoidance\ndef obstacle_avoidance():\n    distance = maqueen.ultrasonic_read(0) # Read distance from ultrasonic sensor (assuming on port 0)\n\n    if distance < 20: # If obstacle is closer than 20cm (adjust as needed)\n        maqueen.motor_stop_all() # Stop\n        maqueen.motor_move(maqueen.MOTOR_ALL, maqueen.MOTOR_BACKWARD, 50, 500) # Reverse for 500ms\n        sleep(500) # Wait\n        maqueen.motor_move(maqueen.MOTOR_LEFT, maqueen.MOTOR_FORWARD, 50, 500) # Turn right for 500ms (adjust direction as needed)\n        sleep(500) # Wait\n    else:\n        maqueen.motor_move(maqueen.MOTOR_ALL, maqueen.MOTOR_FORWARD, 50, 0) # Go forward if no obstacle\n\n# Light Following (Light Catching)\ndef light_follow():\n    light_level = display.read_light_level()\n\n    if light_level > 10: # If light level is above 10 (adjust threshold as needed)\n        maqueen.motor_move(maqueen.MOTOR_ALL, maqueen.MOTOR_FORWARD, 50, 0) # Move forward\n    else:\n        maqueen.motor_stop_all() #stop the car\n\n\n# Main Loop\nwhile True:\n    if button_a.is_pressed(): # Line following mode\n        line_follow()\n    elif button_b.is_pressed(): # Obstacle avoidance mode\n        obstacle_avoidance()\n    elif accelerometer.was_gesture(\"shake\"): #Light following mode\n        light_follow()\n    else:\n        maqueen.motor_stop_all() # if no buttons or gesture pressed stop the car"}]},{"timestamp":1739625798127,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"t ma"],[-1,"chine\nimport utime\n\n# Motor control pins\nleft_motor_forward = machine.Pin(8, machine.Pin.OUT)\nleft_motor_backward = machine.Pin(12, machine.Pin.OUT)\nright_motor_forward = machine.Pin(0, machine.Pin.OUT)\nright_motor_backward = machine.Pin(16, machine.Pin.OUT)\n\n# IR sensors for"],[1,"queen\n\n# Initialize motor driver\nmaqueen.motor_init()\n\n# Line Following\ndef"],[0," line"],[-1," "],[1,"_"],[0,"follow"],[-1,"ing\nleft_ir = machine.Pin(1, machine.Pin.IN)\nright_ir = machine.Pin(2, machine.Pin.IN)\n\n# Ultrasonic sensor for obstacle avoidance\ntrigger = machine.Pin(13, machine.Pin.OUT)\necho = machine.Pin(14, machine.Pin.IN)\n\n# Light sensor for light following\nlight_sensor = machine.ADC(3)\n\ndef move_forward():\n    left_motor_forward.high()\n    right_motor_forward.high()\n    left_motor_backward.low()\n    right_motor_backward.low()\n\ndef move_backward():\n    left_motor_forward.low()\n    right_motor_forward.low()\n    left_motor_backward.high()\n    right_motor_backward.high()\n\ndef"],[1,"():\n    left_sensor = maqueen.read_line_sensor(0)  # Assuming sensor 0 is left\n    right_sensor = maqueen.read_line_sensor(1) # Assuming sensor 1 is right\n\n    if left_sensor == 0 and right_sensor == 0:  # Both on white, go forward\n        maqueen.motor_move(maqueen.MOTOR_ALL, maqueen.MOTOR_FORWARD, 50, 0) # 0 duration means continuously\n    elif left_sensor == 1 and right_sensor == 0: # Left on black,"],[0," turn"],[-1,"_"],[1," "],[0,"left"],[-1,"():"],[0,"\n    "],[-1,"left_motor_forward.low()\n    right_motor_forward.high()\n    left_motor_backward.low()\n    right_motor_backward.low()\n\ndef"],[1,"    maqueen.motor_move(maqueen.MOTOR_LEFT, maqueen.MOTOR_FORWARD, 30, 0)\n        maqueen.motor_move(maqueen.MOTOR_RIGHT, maqueen.MOTOR_FORWARD, 70, 0)\n    elif left_sensor == 0 and right_sensor == 1: # Right on black,"],[0," turn"],[-1,"_"],[1," "],[0,"right"],[-1,"():"],[0,"\n    "],[-1,"left_motor_forward.high()\n    right_motor_forward.low()\n    left_motor_backward.low()\n    right_motor_backward.low()\n\ndef stop():\n    left_motor_forward.low()\n    right_motor_forward.low()\n    left_motor_backward.low()\n    right_motor_backward.low()\n\ndef get_distance():\n    trigger.high()\n    utime.sleep_us(10)\n    trigger.low()\n    while echo.value() == 0:\n        start = utime.ticks_us()\n    while echo.value() == 1:\n        end = utime.ticks_us()\n    duration = utime.ticks_diff(end, start)\n    distance = (duration * 0.0343) / 2\n    return distance\n\ndef follow_line():\n    if left_ir.value() == 0 and right_ir.value() == 0:\n        move_forward()\n    elif left_ir.value() == 1:\n        turn_"],[1,"    maqueen.motor_move(maqueen.MOTOR_LEFT, maqueen.MOTOR_FORWARD, 70, 0)\n        maqueen.motor_move(maqueen.MOTOR_RIGHT, maqueen.MOTOR_FORWARD, 30, 0)\n    elif left_sensor == 1 and right_sensor == 1: # Both on black, stop or other action\n        maqueen.motor_stop_all()  # Stop\n        # Or: maqueen.motor_move(maqueen.MOTOR_ALL, maqueen.MOTOR_BACKWARD, 50, 500)  # Reverse for 500ms\n\n# Obstacle Avoidance\ndef obstacle_avoidance():\n    distance = maqueen.ultrasonic_read(0) # Read distance from ultrasonic sensor (assuming on port 0)\n\n    if distance < 20: # If obstacle is closer than 20cm (adjust as needed)\n        maqueen.motor_stop_all() # Stop\n        maqueen.motor_move(maqueen.MOTOR_ALL, maqueen.MOTOR_BACKWARD, 50, 500) # Reverse for 500ms\n        sleep(500) # Wait\n        maqueen.motor_move(maqueen.MOTOR_LEFT, maqueen.MOTOR_FORWARD, 50, 500) # Turn "],[0,"right"],[-1,"()\n    elif right_ir.value() == 1:\n        turn_left()\n    else:\n        stop()\n\ndef avoid_obstacles():\n    distance = get_distance"],[1," for 500ms (adjust direction as needed)\n        sleep(500) # Wait\n    else:\n        maqueen.motor_move(maqueen.MOTOR_ALL, maqueen.MOTOR_FORWARD, 50, 0) # Go forward if no obstacle\n\n# Light Following (Light Catching)\ndef light_follow():\n    light_level = display.read_light_level"],[0,"()\n"],[1,"\n"],[0,"    if "],[-1,"distance < 10:\n        move_backward()\n        utime.sleep(0.5)\n        turn_left()\n        utime.sleep(0.5)\n    else:\n        move_forward()\n\ndef follow_light():\n    light_level = light_sensor.read_u16()\n    if light_level > 30000:\n        move_forward()\n    else:\n        stop()\n\nwhile True:\n    follow_line()\n    avoid_obstacles()\n    follow_light()\n    utime.sleep(0.1)\n"],[1,"light_level > 10: # If light level is above 10 (adjust threshold as needed)\n        maqueen.motor_move(maqueen.MOTOR_ALL, maqueen.MOTOR_FORWARD, 50, 0) # Move forward\n    else:\n        maqueen.motor_stop_all() #stop the car\n\n\n# Main Loop\nwhile True:\n    if button_a.is_pressed(): # Line following mode\n        line_follow()\n    elif button_b.is_pressed(): # Obstacle avoidance mode\n        obstacle_avoidance()\n    elif accelerometer.was_gesture(\"shake\"): #Light following mode\n        light_follow()\n    else:\n        maqueen.motor_stop_all() # if no buttons or gesture pressed stop the car"]],"start1":28,"start2":28,"length1":2238,"length2":2491}]}]},{"timestamp":1739626308730,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"itor\": \""],[-1,"blocks"],[1,"py"],[0,"prj\"\n}\n"]],"start1":330,"start2":330,"length1":21,"length2":17}]},{"type":"edited","filename":"main.py","patch":[{"diffs":[[1,"from microbit import *\nimport machine\nimport utime\n\n# Motor control pins\nleft_motor_forward = machine.Pin(8, machine.Pin.OUT)\nleft_motor_backward = machine.Pin(12, machine.Pin.OUT)\nright_motor_forward = machine.Pin(0, machine.Pin.OUT)\nright_motor_backward = machine.Pin(16, machine.Pin.OUT)\n\n# IR sensors for line following\nleft_ir = machine.Pin(1, machine.Pin.IN)\nright_ir = machine.Pin(2, machine.Pin.IN)\n\n# Ultrasonic sensor for obstacle avoidance\ntrigger = machine.Pin(13, machine.Pin.OUT)\necho = machine.Pin(14, machine.Pin.IN)\n\n# Light sensor for light following\nlight_sensor = machine.ADC(3)\n\ndef move_forward():\n    left_motor_forward.high()\n    right_motor_forward.high()\n    left_motor_backward.low()\n    right_motor_backward.low()\n\ndef move_backward():\n    left_motor_forward.low()\n    right_motor_forward.low()\n    left_motor_backward.high()\n    right_motor_backward.high()\n\ndef turn_left():\n    left_motor_forward.low()\n    right_motor_forward.high()\n    left_motor_backward.low()\n    right_motor_backward.low()\n\ndef turn_right():\n    left_motor_forward.high()\n    right_motor_forward.low()\n    left_motor_backward.low()\n    right_motor_backward.low()\n\ndef stop():\n    left_motor_forward.low()\n    right_motor_forward.low()\n    left_motor_backward.low()\n    right_motor_backward.low()\n\ndef get_distance():\n    trigger.high()\n    utime.sleep_us(10)\n    trigger.low()\n    while echo.value() == 0:\n        start = utime.ticks_us()\n    while echo.value() == 1:\n        end = utime.ticks_us()\n    duration = utime.ticks_diff(end, start)\n    distance = (duration * 0.0343) / 2\n    return distance\n\ndef follow_line():\n    if left_ir.value() == 0 and right_ir.value() == 0:\n        move_forward()\n    elif left_ir.value() == 1:\n        turn_right()\n    elif right_ir.value() == 1:\n        turn_left()\n    else:\n        stop()\n\ndef avoid_obstacles():\n    distance = get_distance()\n    if distance < 10:\n        move_backward()\n        utime.sleep(0.5)\n        turn_left()\n        utime.sleep(0.5)\n    else:\n        move_forward()\n\ndef follow_light():\n    light_level = light_sensor.read_u16()\n    if light_level > 30000:\n        move_forward()\n    else:\n        stop()\n\nwhile True:\n    follow_line()\n    avoid_obstacles()\n    follow_light()\n    utime.sleep(0.1)"],[0,"\n"]],"start1":0,"start2":0,"length1":1,"length2":2266}]}]},{"timestamp":1739626630104,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"itor\": \""],[-1,"py"],[1,"blocks"],[0,"prj\"\n}\n"]],"start1":330,"start2":330,"length1":17,"length2":21}]},{"type":"edited","filename":"main.py","patch":[{"diffs":[[-1,"from microbit import *\nimport maqueen\n\n# Initialize Maqueen\nmaqueen.init()\n\n# Line Follower\ndef line_follower():\n    while True:\n        left_sensor = maqueen.read_patrol(0)  # Left line sensor\n        right_sensor = maqueen.read_patrol(1) # Right line sensor\n\n        if left_sensor == 0 and right_sensor == 0:  # On the line\n            maqueen.motor_run(0, 60)  # Left motor forward\n            maqueen.motor_run(1, 60)  # Right motor forward\n        elif left_sensor == 1 and right_sensor == 0:  # Left off line, right on line\n            maqueen.motor_run(0, 40)  # Turn left slightly\n            maqueen.motor_run(1, 80)\n        elif left_sensor == 0 and right_sensor == 1:  # Left on line, right off line\n            maqueen.motor_run(0, 80)  # Turn right slightly\n            maqueen.motor_run(1, 40)\n        elif left_sensor == 1 and right_sensor == 1:  # Both off line (lost line)\n            maqueen.motor_run(0, 50) # Go forward or adjust as needed\n            maqueen.motor_run(1, 50)\n        \n        if button_a.is_pressed(): # Exit line following mode\n            break\n        sleep(20)  # Adjust delay for sensitivity\n\n# Obstacle Avoidance\ndef obstacle_avoidance():\n    while True:\n        distance = maqueen.ultrasonic(2) # Ultrasonic sensor on pin2\n\n        if distance < 20:  # Adjust threshold as needed\n            maqueen.motor_run(0, -60)  # Reverse left\n            maqueen.motor_run(1, 60)   # Turn right\n            sleep(500) # Adjust turn duration\n        else:\n            maqueen.motor_run(0, 60)  # Go forward\n            maqueen.motor_run(1, 60)\n\n        if button_b.is_pressed(): # Exit obstacle avoidance\n            break\n        sleep(20) # Adjust delay\n\n# Light Following (adjust pin as needed)\ndef light_following():\n    while True:\n      light_level =  analog_read_pin(pin1) # Using pin1 for light sensor. Change if needed.\n\n      if light_level > 500: # Adjust threshold\n        maqueen.motor_run(0, 80)\n        maqueen.motor_run(1, 80)\n      else:\n        maqueen.motor_run(0, 0)\n        maqueen.motor_run(1, 0)\n\n      if button_a.is_pressed(): # Exit light following\n          break\n      sleep(20)\n\nwhile True:\n    if button_a.is_pressed():\n        display.scroll(\"Line\")\n        line_follower()\n    elif button_b.is_pressed():\n        display.scroll(\"Obstacle\")\n        obstacle_avoidance()\n    elif pin0.is_touched():  # Example: pin0 touched for light following\n        display.scroll(\"Light\")\n        light_following()\n    else:\n        maqueen.motor_run(0, 0)  # Stop if no mode is selected\n        maqueen.motor_run(1, 0)\n    sleep(20)"],[0,"\n"]],"start1":0,"start2":0,"length1":2587,"length2":1}]}]},{"timestamp":1739627124287,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":310,"start2":310,"length1":52,"length2":8}]},{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"ueen"],[-1," (no arguments needed)"],[0,"\nmaq"]],"start1":55,"start2":55,"length1":30,"length2":8},{"diffs":[[0," analog_read"],[1,"_pin"],[0,"(pin1) # Cor"]],"start1":1793,"start2":1793,"length1":24,"length2":28},{"diffs":[[0,") # "],[-1,"Corrected: analog_read(pin)"],[1,"Using pin1 for light sensor. Change if needed."],[0,"\n\n  "]],"start1":1814,"start2":1814,"length1":35,"length2":54},{"diffs":[[0,"(1, 0)\n    sleep(20)"],[1,"\n"]],"start1":2566,"start2":2566,"length1":20,"length2":21}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1739032676554,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"DeskPi Microcar\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1739625223948,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"448\" y=\"146\"><statement name=\"HANDLER\"><block type=\"device_show_leds\"><field name=\"LEDS\">`\n        # . . . # \n        . # . # . \n        . . # . . \n        . # . # . \n        # . . . #\n        `</field></block></statement></block></xml>","main.ts":"","README.md":"","pxt.json":"{\n    \"name\": \"DeskPi Microcar\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"blocksprj\"\n}\n"}},{"timestamp":1739627061744,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables></xml>","main.ts":"","README.md":"","main.py":"\n","pxt.json":"{\n    \"name\": \"DeskPi Microcar\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"maqueen\": \"github:dfrobot/pxt-maqueen#v1.7.15\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"main.py\"\n    ],\n    \"preferredEditor\": \"blocksprj\"\n}\n"}}],"shares":[],"lastSaveTime":1739627656991}